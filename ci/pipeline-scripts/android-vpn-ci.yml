.android-before-script:
  # image: openjdk:11-jdk
  image: irdest/android-build-env:latest
  variables:
    ANDROID_COMPILE_SDK: 32
    ANDROID_BUILD_TOOLS: 32.0.0
    ANDROID_SDK_TOOLS: "8512546"
  before_script:
    # Install android SDK 
    - cd clients/android-vpn 
    # Packages installation before running script
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1 gcc python
    # Setup path as ANDROID_SDK_ROOT for moving/exporting the downloaded sdk into it
    - export ANDROID_SDK_ROOT="${PWD}/android-home"
    # Create a new directory at specified location
    - install -d $ANDROID_SDK_ROOT
    # Install androidSDK tools from official source,
    # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
    - wget --output-document=$ANDROID_SDK_ROOT/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    # move to the archive at ANDROID_SDK_ROOT
    - pushd $ANDROID_SDK_ROOT
    - unzip -d cmdline-tools cmdline-tools.zip
    - pushd cmdline-tools
    # since commandline tools version 8512546 the root folder is named "cmdline-tools" so we rename it if necessary
    - mv cmdline-tools tools || true
    - popd
    - popd
    - export PATH=$PATH:${ANDROID_SDK_ROOT}/cmdline-tools/tools/bin/
    # checking sdkManager version
    - sdkmanager --version
    # use yes to accept all licenses
    - yes | sdkmanager --licenses || true
    - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
    - sdkmanager "platform-tools"
    - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"
    # Install NDK
    - sdkmanager --install "ndk;24.0.8215888" --channel=3
    # Not necessary, but just for surity
    - chmod +x ./gradlew 

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - clients/android-vpn/.gradle/

# Compile rust library
cross-compile-android-vpn:
  stage: build
  only:
    changes:
      - clients/android-vpn/**/*
  extends: .android-before-script
  script:
    # Install rust and add target
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - export PATH="/root/.cargo/bin:${PATH}"
    - rustup target add armv7-linux-androideabi   # for arm
    - rustup target add i686-linux-android        # for x86
    - rustup target add aarch64-linux-android     # for arm64
    - rustup target add x86_64-linux-android      # for x86_64
    # build libratman.so and move the library into app/src/main/jniLibs
    - ./gradlew cargoBuild
    # copy libraries to the temporary folder
    - mkdir result-android-vpn && cp -r app/src/main/jniLibs/* result-android-vpn/ 
  artifacts:
    name: "android-vpn-ratman-library"
    paths:
      - clients/android-vpn/result-android-vpn/*

# Check linting
lint-androd-vpn:
  stage: lint 
  only:
    changes:
      - clients/android-vpn/**/*
  extends: .android-before-script
  script:
    - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint

# Build android deBug.apk
build-android-vpn:
  stage: build
  only:
    changes:
      - clients/android-vpn/**/*
  extends: .android-before-script
  script:
    - ./gradlew assembleDebug
    - mkdir result-android-vpn && cp app/build/outputs/apk/debug/app-debug.apk result-android-vpn/irdest-vpn-debug.apk
  artifacts:
    name: "android-vpn-apk"
    paths:
      - clients/android-vpn/result-android-vpn/*

# Run all tests, do not interrupt the pipeline 
test-android-vpn:
  stage: test
  only:
    changes:
      - clients/android-vpn/**/*
  extends: .android-before-script
  script:
    - ./gradlew -Pci --console=plain :app:testDebug